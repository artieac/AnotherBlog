#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AlwaysMoveForward.AnotherBlog.DataLayer.Entities
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ABTestDb")]
	public partial class AnotherBlogDbDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBlogEntryTagDTO(BlogEntryTagDTO instance);
    partial void UpdateBlogEntryTagDTO(BlogEntryTagDTO instance);
    partial void DeleteBlogEntryTagDTO(BlogEntryTagDTO instance);
    partial void InsertBlogExtensionDTO(BlogExtensionDTO instance);
    partial void UpdateBlogExtensionDTO(BlogExtensionDTO instance);
    partial void DeleteBlogExtensionDTO(BlogExtensionDTO instance);
    partial void InsertBlogRollLinkDTO(BlogRollLinkDTO instance);
    partial void UpdateBlogRollLinkDTO(BlogRollLinkDTO instance);
    partial void DeleteBlogRollLinkDTO(BlogRollLinkDTO instance);
    partial void InsertBlogDTO(BlogDTO instance);
    partial void UpdateBlogDTO(BlogDTO instance);
    partial void DeleteBlogDTO(BlogDTO instance);
    partial void InsertBlogUserDTO(BlogUserDTO instance);
    partial void UpdateBlogUserDTO(BlogUserDTO instance);
    partial void DeleteBlogUserDTO(BlogUserDTO instance);
    partial void InsertDbInfoDTO(DbInfoDTO instance);
    partial void UpdateDbInfoDTO(DbInfoDTO instance);
    partial void DeleteDbInfoDTO(DbInfoDTO instance);
    partial void InsertEntryCommentDTO(EntryCommentDTO instance);
    partial void UpdateEntryCommentDTO(EntryCommentDTO instance);
    partial void DeleteEntryCommentDTO(EntryCommentDTO instance);
    partial void InsertExtensionConfigurationDTO(ExtensionConfigurationDTO instance);
    partial void UpdateExtensionConfigurationDTO(ExtensionConfigurationDTO instance);
    partial void DeleteExtensionConfigurationDTO(ExtensionConfigurationDTO instance);
    partial void InsertRoleDTO(RoleDTO instance);
    partial void UpdateRoleDTO(RoleDTO instance);
    partial void DeleteRoleDTO(RoleDTO instance);
    partial void InsertTagDTO(TagDTO instance);
    partial void UpdateTagDTO(TagDTO instance);
    partial void DeleteTagDTO(TagDTO instance);
    partial void InsertSiteInfoDTO(SiteInfoDTO instance);
    partial void UpdateSiteInfoDTO(SiteInfoDTO instance);
    partial void DeleteSiteInfoDTO(SiteInfoDTO instance);
    partial void InsertUserDTO(UserDTO instance);
    partial void UpdateUserDTO(UserDTO instance);
    partial void DeleteUserDTO(UserDTO instance);
    partial void InsertBlogListItemDTO(BlogListItemDTO instance);
    partial void UpdateBlogListItemDTO(BlogListItemDTO instance);
    partial void DeleteBlogListItemDTO(BlogListItemDTO instance);
    partial void InsertBlogListDTO(BlogListDTO instance);
    partial void UpdateBlogListDTO(BlogListDTO instance);
    partial void DeleteBlogListDTO(BlogListDTO instance);
    partial void InsertBlogEntryDTO(BlogEntryDTO instance);
    partial void UpdateBlogEntryDTO(BlogEntryDTO instance);
    partial void DeleteBlogEntryDTO(BlogEntryDTO instance);
    #endregion
		
		public AnotherBlogDbDataContext() : 
				base(global::AlwaysMoveForward.AnotherBlog.DataLayer.Properties.Settings.Default.ABTestDbConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public AnotherBlogDbDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AnotherBlogDbDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AnotherBlogDbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AnotherBlogDbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<BlogEntryTagDTO> BlogEntryTagDTOs
		{
			get
			{
				return this.GetTable<BlogEntryTagDTO>();
			}
		}
		
		public System.Data.Linq.Table<BlogExtensionDTO> BlogExtensionDTOs
		{
			get
			{
				return this.GetTable<BlogExtensionDTO>();
			}
		}
		
		public System.Data.Linq.Table<BlogRollLinkDTO> BlogRollLinkDTOs
		{
			get
			{
				return this.GetTable<BlogRollLinkDTO>();
			}
		}
		
		public System.Data.Linq.Table<BlogDTO> BlogDTOs
		{
			get
			{
				return this.GetTable<BlogDTO>();
			}
		}
		
		public System.Data.Linq.Table<BlogUserDTO> BlogUserDTOs
		{
			get
			{
				return this.GetTable<BlogUserDTO>();
			}
		}
		
		public System.Data.Linq.Table<DbInfoDTO> DbInfoDTOs
		{
			get
			{
				return this.GetTable<DbInfoDTO>();
			}
		}
		
		public System.Data.Linq.Table<EntryCommentDTO> EntryCommentDTOs
		{
			get
			{
				return this.GetTable<EntryCommentDTO>();
			}
		}
		
		public System.Data.Linq.Table<ExtensionConfigurationDTO> ExtensionConfigurationDTOs
		{
			get
			{
				return this.GetTable<ExtensionConfigurationDTO>();
			}
		}
		
		public System.Data.Linq.Table<RoleDTO> RoleDTOs
		{
			get
			{
				return this.GetTable<RoleDTO>();
			}
		}
		
		public System.Data.Linq.Table<TagDTO> TagDTOs
		{
			get
			{
				return this.GetTable<TagDTO>();
			}
		}
		
		public System.Data.Linq.Table<SiteInfoDTO> SiteInfoDTOs
		{
			get
			{
				return this.GetTable<SiteInfoDTO>();
			}
		}
		
		public System.Data.Linq.Table<UserDTO> UserDTOs
		{
			get
			{
				return this.GetTable<UserDTO>();
			}
		}
		
		public System.Data.Linq.Table<BlogListItemDTO> BlogListItemDTOs
		{
			get
			{
				return this.GetTable<BlogListItemDTO>();
			}
		}
		
		public System.Data.Linq.Table<BlogListDTO> BlogListDTOs
		{
			get
			{
				return this.GetTable<BlogListDTO>();
			}
		}
		
		public System.Data.Linq.Table<BlogEntryDTO> BlogEntryDTOs
		{
			get
			{
				return this.GetTable<BlogEntryDTO>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BlogEntryTags")]
	public partial class BlogEntryTagDTO : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TagId;
		
		private int _BlogEntryId;
		
		private int _BlogEntryTagId;
		
		private EntityRef<TagDTO> _TagDTO;
		
		private EntityRef<BlogEntryDTO> _BlogEntryDTO;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTagIdChanging(int value);
    partial void OnTagIdChanged();
    partial void OnPostIdChanging(int value);
    partial void OnPostIdChanged();
    partial void OnBlogEntryTagIdChanging(int value);
    partial void OnBlogEntryTagIdChanged();
    #endregion
		
		public BlogEntryTagDTO()
		{
			this._TagDTO = default(EntityRef<TagDTO>);
			this._BlogEntryDTO = default(EntityRef<BlogEntryDTO>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TagId", DbType="Int NOT NULL")]
		public int TagId
		{
			get
			{
				return this._TagId;
			}
			set
			{
				if ((this._TagId != value))
				{
					if (this._TagDTO.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTagIdChanging(value);
					this.SendPropertyChanging();
					this._TagId = value;
					this.SendPropertyChanged("TagId");
					this.OnTagIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="BlogEntryId", Storage="_BlogEntryId", DbType="Int NOT NULL")]
		public int PostId
		{
			get
			{
				return this._BlogEntryId;
			}
			set
			{
				if ((this._BlogEntryId != value))
				{
					this.OnPostIdChanging(value);
					this.SendPropertyChanging();
					this._BlogEntryId = value;
					this.SendPropertyChanged("PostId");
					this.OnPostIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BlogEntryTagId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BlogEntryTagId
		{
			get
			{
				return this._BlogEntryTagId;
			}
			set
			{
				if ((this._BlogEntryTagId != value))
				{
					this.OnBlogEntryTagIdChanging(value);
					this.SendPropertyChanging();
					this._BlogEntryTagId = value;
					this.SendPropertyChanged("BlogEntryTagId");
					this.OnBlogEntryTagIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TagDTO_BlogEntryTagDTO", Storage="_TagDTO", ThisKey="TagId", OtherKey="Id", IsForeignKey=true)]
		public TagDTO TagDTO
		{
			get
			{
				return this._TagDTO.Entity;
			}
			set
			{
				TagDTO previousValue = this._TagDTO.Entity;
				if (((previousValue != value) 
							|| (this._TagDTO.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TagDTO.Entity = null;
						previousValue.BlogEntryTagDTOs.Remove(this);
					}
					this._TagDTO.Entity = value;
					if ((value != null))
					{
						value.BlogEntryTagDTOs.Add(this);
						this._TagId = value.Id;
					}
					else
					{
						this._TagId = default(int);
					}
					this.SendPropertyChanged("TagDTO");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BlogEntryDTO_BlogEntryTagDTO", Storage="_BlogEntryDTO", ThisKey="PostId", OtherKey="EntryId", IsForeignKey=true)]
		public BlogEntryDTO BlogEntryDTO
		{
			get
			{
				return this._BlogEntryDTO.Entity;
			}
			set
			{
				BlogEntryDTO previousValue = this._BlogEntryDTO.Entity;
				if (((previousValue != value) 
							|| (this._BlogEntryDTO.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BlogEntryDTO.Entity = null;
						previousValue.BlogEntryTagDTOs.Remove(this);
					}
					this._BlogEntryDTO.Entity = value;
					if ((value != null))
					{
						value.BlogEntryTagDTOs.Add(this);
						this._BlogEntryId = value.EntryId;
					}
					else
					{
						this._BlogEntryId = default(int);
					}
					this.SendPropertyChanged("BlogEntryDTO");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BlogExtensions")]
	public partial class BlogExtensionDTO : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _AssemblyName;
		
		private int _PageLocation;
		
		private int _ExtensionId;
		
		private int _SectionOrder;
		
		private string _ClassName;
		
		private string _AssemblyPath;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAssemblyNameChanging(string value);
    partial void OnAssemblyNameChanged();
    partial void OnPageLocationChanging(int value);
    partial void OnPageLocationChanged();
    partial void OnExtensionIdChanging(int value);
    partial void OnExtensionIdChanged();
    partial void OnSectionOrderChanging(int value);
    partial void OnSectionOrderChanged();
    partial void OnClassNameChanging(string value);
    partial void OnClassNameChanged();
    partial void OnAssemblyPathChanging(string value);
    partial void OnAssemblyPathChanged();
    #endregion
		
		public BlogExtensionDTO()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssemblyName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string AssemblyName
		{
			get
			{
				return this._AssemblyName;
			}
			set
			{
				if ((this._AssemblyName != value))
				{
					this.OnAssemblyNameChanging(value);
					this.SendPropertyChanging();
					this._AssemblyName = value;
					this.SendPropertyChanged("AssemblyName");
					this.OnAssemblyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PageLocation", DbType="Int NOT NULL")]
		public int PageLocation
		{
			get
			{
				return this._PageLocation;
			}
			set
			{
				if ((this._PageLocation != value))
				{
					this.OnPageLocationChanging(value);
					this.SendPropertyChanging();
					this._PageLocation = value;
					this.SendPropertyChanged("PageLocation");
					this.OnPageLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExtensionId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ExtensionId
		{
			get
			{
				return this._ExtensionId;
			}
			set
			{
				if ((this._ExtensionId != value))
				{
					this.OnExtensionIdChanging(value);
					this.SendPropertyChanging();
					this._ExtensionId = value;
					this.SendPropertyChanged("ExtensionId");
					this.OnExtensionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SectionOrder", DbType="Int NOT NULL")]
		public int SectionOrder
		{
			get
			{
				return this._SectionOrder;
			}
			set
			{
				if ((this._SectionOrder != value))
				{
					this.OnSectionOrderChanging(value);
					this.SendPropertyChanging();
					this._SectionOrder = value;
					this.SendPropertyChanged("SectionOrder");
					this.OnSectionOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string ClassName
		{
			get
			{
				return this._ClassName;
			}
			set
			{
				if ((this._ClassName != value))
				{
					this.OnClassNameChanging(value);
					this.SendPropertyChanging();
					this._ClassName = value;
					this.SendPropertyChanged("ClassName");
					this.OnClassNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssemblyPath", DbType="NVarChar(1024)")]
		public string AssemblyPath
		{
			get
			{
				return this._AssemblyPath;
			}
			set
			{
				if ((this._AssemblyPath != value))
				{
					this.OnAssemblyPathChanging(value);
					this.SendPropertyChanging();
					this._AssemblyPath = value;
					this.SendPropertyChanged("AssemblyPath");
					this.OnAssemblyPathChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BlogRollLinks")]
	public partial class BlogRollLinkDTO : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _LinkName;
		
		private string _Url;
		
		private int _BlogId;
		
		private int _BlogRollLinkId;
		
		private EntityRef<BlogDTO> _BlogDTO;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLinkNameChanging(string value);
    partial void OnLinkNameChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnBlogIdChanging(int value);
    partial void OnBlogIdChanged();
    partial void OnBlogRollLinkIdChanging(int value);
    partial void OnBlogRollLinkIdChanged();
    #endregion
		
		public BlogRollLinkDTO()
		{
			this._BlogDTO = default(EntityRef<BlogDTO>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LinkName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string LinkName
		{
			get
			{
				return this._LinkName;
			}
			set
			{
				if ((this._LinkName != value))
				{
					this.OnLinkNameChanging(value);
					this.SendPropertyChanging();
					this._LinkName = value;
					this.SendPropertyChanged("LinkName");
					this.OnLinkNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Url", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BlogId", DbType="Int NOT NULL")]
		public int BlogId
		{
			get
			{
				return this._BlogId;
			}
			set
			{
				if ((this._BlogId != value))
				{
					if (this._BlogDTO.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBlogIdChanging(value);
					this.SendPropertyChanging();
					this._BlogId = value;
					this.SendPropertyChanged("BlogId");
					this.OnBlogIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BlogRollLinkId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BlogRollLinkId
		{
			get
			{
				return this._BlogRollLinkId;
			}
			set
			{
				if ((this._BlogRollLinkId != value))
				{
					this.OnBlogRollLinkIdChanging(value);
					this.SendPropertyChanging();
					this._BlogRollLinkId = value;
					this.SendPropertyChanged("BlogRollLinkId");
					this.OnBlogRollLinkIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BlogDTO_BlogRollLinkDTO", Storage="_BlogDTO", ThisKey="BlogId", OtherKey="BlogId", IsForeignKey=true)]
		public BlogDTO BlogDTO
		{
			get
			{
				return this._BlogDTO.Entity;
			}
			set
			{
				BlogDTO previousValue = this._BlogDTO.Entity;
				if (((previousValue != value) 
							|| (this._BlogDTO.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BlogDTO.Entity = null;
						previousValue.BlogRollLinkDTOs.Remove(this);
					}
					this._BlogDTO.Entity = value;
					if ((value != null))
					{
						value.BlogRollLinkDTOs.Add(this);
						this._BlogId = value.BlogId;
					}
					else
					{
						this._BlogId = default(int);
					}
					this.SendPropertyChanged("BlogDTO");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Blogs")]
	public partial class BlogDTO : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BlogId;
		
		private string _Name;
		
		private string _Description;
		
		private string _SubFolder;
		
		private string _About;
		
		private string _WelcomeMessage;
		
		private string _ContactEmail;
		
		private string _Theme;
		
		private EntitySet<BlogRollLinkDTO> _BlogRollLinkDTOs;
		
		private EntitySet<BlogUserDTO> _BlogUserDTOs;
		
		private EntitySet<EntryCommentDTO> _EntryCommentDTOs;
		
		private EntitySet<TagDTO> _TagDTOs;
		
		private EntitySet<BlogListDTO> _BlogListDTOs;
		
		private EntitySet<BlogEntryDTO> _BlogEntryDTOs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBlogIdChanging(int value);
    partial void OnBlogIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnSubFolderChanging(string value);
    partial void OnSubFolderChanged();
    partial void OnAboutChanging(string value);
    partial void OnAboutChanged();
    partial void OnWelcomeMessageChanging(string value);
    partial void OnWelcomeMessageChanged();
    partial void OnContactEmailChanging(string value);
    partial void OnContactEmailChanged();
    partial void OnThemeChanging(string value);
    partial void OnThemeChanged();
    #endregion
		
		public BlogDTO()
		{
			this._BlogRollLinkDTOs = new EntitySet<BlogRollLinkDTO>(new Action<BlogRollLinkDTO>(this.attach_BlogRollLinkDTOs), new Action<BlogRollLinkDTO>(this.detach_BlogRollLinkDTOs));
			this._BlogUserDTOs = new EntitySet<BlogUserDTO>(new Action<BlogUserDTO>(this.attach_BlogUserDTOs), new Action<BlogUserDTO>(this.detach_BlogUserDTOs));
			this._EntryCommentDTOs = new EntitySet<EntryCommentDTO>(new Action<EntryCommentDTO>(this.attach_EntryCommentDTOs), new Action<EntryCommentDTO>(this.detach_EntryCommentDTOs));
			this._TagDTOs = new EntitySet<TagDTO>(new Action<TagDTO>(this.attach_TagDTOs), new Action<TagDTO>(this.detach_TagDTOs));
			this._BlogListDTOs = new EntitySet<BlogListDTO>(new Action<BlogListDTO>(this.attach_BlogListDTOs), new Action<BlogListDTO>(this.detach_BlogListDTOs));
			this._BlogEntryDTOs = new EntitySet<BlogEntryDTO>(new Action<BlogEntryDTO>(this.attach_BlogEntryDTOs), new Action<BlogEntryDTO>(this.detach_BlogEntryDTOs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BlogId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BlogId
		{
			get
			{
				return this._BlogId;
			}
			set
			{
				if ((this._BlogId != value))
				{
					this.OnBlogIdChanging(value);
					this.SendPropertyChanging();
					this._BlogId = value;
					this.SendPropertyChanged("BlogId");
					this.OnBlogIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubFolder", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string SubFolder
		{
			get
			{
				return this._SubFolder;
			}
			set
			{
				if ((this._SubFolder != value))
				{
					this.OnSubFolderChanging(value);
					this.SendPropertyChanging();
					this._SubFolder = value;
					this.SendPropertyChanged("SubFolder");
					this.OnSubFolderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_About", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string About
		{
			get
			{
				return this._About;
			}
			set
			{
				if ((this._About != value))
				{
					this.OnAboutChanging(value);
					this.SendPropertyChanging();
					this._About = value;
					this.SendPropertyChanged("About");
					this.OnAboutChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WelcomeMessage", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string WelcomeMessage
		{
			get
			{
				return this._WelcomeMessage;
			}
			set
			{
				if ((this._WelcomeMessage != value))
				{
					this.OnWelcomeMessageChanging(value);
					this.SendPropertyChanging();
					this._WelcomeMessage = value;
					this.SendPropertyChanged("WelcomeMessage");
					this.OnWelcomeMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactEmail", DbType="NVarChar(50)")]
		public string ContactEmail
		{
			get
			{
				return this._ContactEmail;
			}
			set
			{
				if ((this._ContactEmail != value))
				{
					this.OnContactEmailChanging(value);
					this.SendPropertyChanging();
					this._ContactEmail = value;
					this.SendPropertyChanged("ContactEmail");
					this.OnContactEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Theme", DbType="NVarChar(50)")]
		public string Theme
		{
			get
			{
				return this._Theme;
			}
			set
			{
				if ((this._Theme != value))
				{
					this.OnThemeChanging(value);
					this.SendPropertyChanging();
					this._Theme = value;
					this.SendPropertyChanged("Theme");
					this.OnThemeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BlogDTO_BlogRollLinkDTO", Storage="_BlogRollLinkDTOs", ThisKey="BlogId", OtherKey="BlogId")]
		public EntitySet<BlogRollLinkDTO> BlogRollLinkDTOs
		{
			get
			{
				return this._BlogRollLinkDTOs;
			}
			set
			{
				this._BlogRollLinkDTOs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BlogDTO_BlogUserDTO", Storage="_BlogUserDTOs", ThisKey="BlogId", OtherKey="BlogId")]
		public EntitySet<BlogUserDTO> BlogUserDTOs
		{
			get
			{
				return this._BlogUserDTOs;
			}
			set
			{
				this._BlogUserDTOs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BlogDTO_EntryCommentDTO", Storage="_EntryCommentDTOs", ThisKey="BlogId", OtherKey="BlogId")]
		public EntitySet<EntryCommentDTO> EntryCommentDTOs
		{
			get
			{
				return this._EntryCommentDTOs;
			}
			set
			{
				this._EntryCommentDTOs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BlogDTO_TagDTO", Storage="_TagDTOs", ThisKey="BlogId", OtherKey="BlogId")]
		public EntitySet<TagDTO> TagDTOs
		{
			get
			{
				return this._TagDTOs;
			}
			set
			{
				this._TagDTOs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BlogDTO_BlogListDTO", Storage="_BlogListDTOs", ThisKey="BlogId", OtherKey="BlogId")]
		public EntitySet<BlogListDTO> BlogListDTOs
		{
			get
			{
				return this._BlogListDTOs;
			}
			set
			{
				this._BlogListDTOs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BlogDTO_BlogEntryDTO", Storage="_BlogEntryDTOs", ThisKey="BlogId", OtherKey="BlogId")]
		public EntitySet<BlogEntryDTO> BlogEntryDTOs
		{
			get
			{
				return this._BlogEntryDTOs;
			}
			set
			{
				this._BlogEntryDTOs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BlogRollLinkDTOs(BlogRollLinkDTO entity)
		{
			this.SendPropertyChanging();
			entity.BlogDTO = this;
		}
		
		private void detach_BlogRollLinkDTOs(BlogRollLinkDTO entity)
		{
			this.SendPropertyChanging();
			entity.BlogDTO = null;
		}
		
		private void attach_BlogUserDTOs(BlogUserDTO entity)
		{
			this.SendPropertyChanging();
			entity.BlogDTO = this;
		}
		
		private void detach_BlogUserDTOs(BlogUserDTO entity)
		{
			this.SendPropertyChanging();
			entity.BlogDTO = null;
		}
		
		private void attach_EntryCommentDTOs(EntryCommentDTO entity)
		{
			this.SendPropertyChanging();
			entity.BlogDTO = this;
		}
		
		private void detach_EntryCommentDTOs(EntryCommentDTO entity)
		{
			this.SendPropertyChanging();
			entity.BlogDTO = null;
		}
		
		private void attach_TagDTOs(TagDTO entity)
		{
			this.SendPropertyChanging();
			entity.BlogDTO = this;
		}
		
		private void detach_TagDTOs(TagDTO entity)
		{
			this.SendPropertyChanging();
			entity.BlogDTO = null;
		}
		
		private void attach_BlogListDTOs(BlogListDTO entity)
		{
			this.SendPropertyChanging();
			entity.BlogDTO = this;
		}
		
		private void detach_BlogListDTOs(BlogListDTO entity)
		{
			this.SendPropertyChanging();
			entity.BlogDTO = null;
		}
		
		private void attach_BlogEntryDTOs(BlogEntryDTO entity)
		{
			this.SendPropertyChanging();
			entity.BlogDTO = this;
		}
		
		private void detach_BlogEntryDTOs(BlogEntryDTO entity)
		{
			this.SendPropertyChanging();
			entity.BlogDTO = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BlogUsers")]
	public partial class BlogUserDTO : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BlogId;
		
		private int _UserId;
		
		private int _RoleId;
		
		private int _BlogUserId;
		
		private EntityRef<BlogDTO> _BlogDTO;
		
		private EntityRef<RoleDTO> _RoleDTO;
		
		private EntityRef<UserDTO> _UserDTO;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBlogIdChanging(int value);
    partial void OnBlogIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnRoleIdChanging(int value);
    partial void OnRoleIdChanged();
    partial void OnBlogUserIdChanging(int value);
    partial void OnBlogUserIdChanged();
    #endregion
		
		public BlogUserDTO()
		{
			this._BlogDTO = default(EntityRef<BlogDTO>);
			this._RoleDTO = default(EntityRef<RoleDTO>);
			this._UserDTO = default(EntityRef<UserDTO>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BlogId", DbType="Int NOT NULL")]
		public int BlogId
		{
			get
			{
				return this._BlogId;
			}
			set
			{
				if ((this._BlogId != value))
				{
					if (this._BlogDTO.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBlogIdChanging(value);
					this.SendPropertyChanging();
					this._BlogId = value;
					this.SendPropertyChanged("BlogId");
					this.OnBlogIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._UserDTO.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="Int NOT NULL")]
		public int RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._RoleDTO.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BlogUserId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BlogUserId
		{
			get
			{
				return this._BlogUserId;
			}
			set
			{
				if ((this._BlogUserId != value))
				{
					this.OnBlogUserIdChanging(value);
					this.SendPropertyChanging();
					this._BlogUserId = value;
					this.SendPropertyChanged("BlogUserId");
					this.OnBlogUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BlogDTO_BlogUserDTO", Storage="_BlogDTO", ThisKey="BlogId", OtherKey="BlogId", IsForeignKey=true)]
		public BlogDTO BlogDTO
		{
			get
			{
				return this._BlogDTO.Entity;
			}
			set
			{
				BlogDTO previousValue = this._BlogDTO.Entity;
				if (((previousValue != value) 
							|| (this._BlogDTO.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BlogDTO.Entity = null;
						previousValue.BlogUserDTOs.Remove(this);
					}
					this._BlogDTO.Entity = value;
					if ((value != null))
					{
						value.BlogUserDTOs.Add(this);
						this._BlogId = value.BlogId;
					}
					else
					{
						this._BlogId = default(int);
					}
					this.SendPropertyChanged("BlogDTO");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoleDTO_BlogUserDTO", Storage="_RoleDTO", ThisKey="RoleId", OtherKey="RoleId", IsForeignKey=true)]
		public RoleDTO RoleDTO
		{
			get
			{
				return this._RoleDTO.Entity;
			}
			set
			{
				RoleDTO previousValue = this._RoleDTO.Entity;
				if (((previousValue != value) 
							|| (this._RoleDTO.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RoleDTO.Entity = null;
						previousValue.BlogUserDTOs.Remove(this);
					}
					this._RoleDTO.Entity = value;
					if ((value != null))
					{
						value.BlogUserDTOs.Add(this);
						this._RoleId = value.RoleId;
					}
					else
					{
						this._RoleId = default(int);
					}
					this.SendPropertyChanged("RoleDTO");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserDTO_BlogUserDTO", Storage="_UserDTO", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public UserDTO UserDTO
		{
			get
			{
				return this._UserDTO.Entity;
			}
			set
			{
				UserDTO previousValue = this._UserDTO.Entity;
				if (((previousValue != value) 
							|| (this._UserDTO.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserDTO.Entity = null;
						previousValue.BlogUserDTOs.Remove(this);
					}
					this._UserDTO.Entity = value;
					if ((value != null))
					{
						value.BlogUserDTOs.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("UserDTO");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DbInfo")]
	public partial class DbInfoDTO : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Version;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVersionChanging(int value);
    partial void OnVersionChanged();
    #endregion
		
		public DbInfoDTO()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EntryComments")]
	public partial class EntryCommentDTO : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CommentId;
		
		private int _EntryId;
		
		private string _AuthorEmail;
		
		private System.Nullable<int> _RelatedComment;
		
		private int _BlogId;
		
		private string _Comment;
		
		private string _AuthorName;
		
		private int _Status;
		
		private string _Link;
		
		private System.DateTime _DatePosted;
		
		private EntityRef<BlogDTO> _BlogDTO;
		
		private EntityRef<BlogEntryDTO> _BlogEntryDTO;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCommentIdChanging(int value);
    partial void OnCommentIdChanged();
    partial void OnEntryIdChanging(int value);
    partial void OnEntryIdChanged();
    partial void OnAuthorEmailChanging(string value);
    partial void OnAuthorEmailChanged();
    partial void OnRelatedCommentChanging(System.Nullable<int> value);
    partial void OnRelatedCommentChanged();
    partial void OnBlogIdChanging(int value);
    partial void OnBlogIdChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnAuthorNameChanging(string value);
    partial void OnAuthorNameChanged();
    partial void OnStatusChanging(int value);
    partial void OnStatusChanged();
    partial void OnLinkChanging(string value);
    partial void OnLinkChanged();
    partial void OnDatePostedChanging(System.DateTime value);
    partial void OnDatePostedChanged();
    #endregion
		
		public EntryCommentDTO()
		{
			this._BlogDTO = default(EntityRef<BlogDTO>);
			this._BlogEntryDTO = default(EntityRef<BlogEntryDTO>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommentId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CommentId
		{
			get
			{
				return this._CommentId;
			}
			set
			{
				if ((this._CommentId != value))
				{
					this.OnCommentIdChanging(value);
					this.SendPropertyChanging();
					this._CommentId = value;
					this.SendPropertyChanged("CommentId");
					this.OnCommentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntryId", DbType="Int NOT NULL")]
		public int EntryId
		{
			get
			{
				return this._EntryId;
			}
			set
			{
				if ((this._EntryId != value))
				{
					if (this._BlogEntryDTO.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEntryIdChanging(value);
					this.SendPropertyChanging();
					this._EntryId = value;
					this.SendPropertyChanged("EntryId");
					this.OnEntryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuthorEmail", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string AuthorEmail
		{
			get
			{
				return this._AuthorEmail;
			}
			set
			{
				if ((this._AuthorEmail != value))
				{
					this.OnAuthorEmailChanging(value);
					this.SendPropertyChanging();
					this._AuthorEmail = value;
					this.SendPropertyChanged("AuthorEmail");
					this.OnAuthorEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelatedComment", DbType="Int")]
		public System.Nullable<int> RelatedComment
		{
			get
			{
				return this._RelatedComment;
			}
			set
			{
				if ((this._RelatedComment != value))
				{
					this.OnRelatedCommentChanging(value);
					this.SendPropertyChanging();
					this._RelatedComment = value;
					this.SendPropertyChanged("RelatedComment");
					this.OnRelatedCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BlogId", DbType="Int NOT NULL")]
		public int BlogId
		{
			get
			{
				return this._BlogId;
			}
			set
			{
				if ((this._BlogId != value))
				{
					if (this._BlogDTO.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBlogIdChanging(value);
					this.SendPropertyChanging();
					this._BlogId = value;
					this.SendPropertyChanged("BlogId");
					this.OnBlogIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Comment", Storage="_Comment", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Text
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuthorName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string AuthorName
		{
			get
			{
				return this._AuthorName;
			}
			set
			{
				if ((this._AuthorName != value))
				{
					this.OnAuthorNameChanging(value);
					this.SendPropertyChanging();
					this._AuthorName = value;
					this.SendPropertyChanged("AuthorName");
					this.OnAuthorNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Link", DbType="NVarChar(100)")]
		public string Link
		{
			get
			{
				return this._Link;
			}
			set
			{
				if ((this._Link != value))
				{
					this.OnLinkChanging(value);
					this.SendPropertyChanging();
					this._Link = value;
					this.SendPropertyChanged("Link");
					this.OnLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DatePosted", DbType="DateTime NOT NULL")]
		public System.DateTime DatePosted
		{
			get
			{
				return this._DatePosted;
			}
			set
			{
				if ((this._DatePosted != value))
				{
					this.OnDatePostedChanging(value);
					this.SendPropertyChanging();
					this._DatePosted = value;
					this.SendPropertyChanged("DatePosted");
					this.OnDatePostedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BlogDTO_EntryCommentDTO", Storage="_BlogDTO", ThisKey="BlogId", OtherKey="BlogId", IsForeignKey=true)]
		public BlogDTO BlogDTO
		{
			get
			{
				return this._BlogDTO.Entity;
			}
			set
			{
				BlogDTO previousValue = this._BlogDTO.Entity;
				if (((previousValue != value) 
							|| (this._BlogDTO.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BlogDTO.Entity = null;
						previousValue.EntryCommentDTOs.Remove(this);
					}
					this._BlogDTO.Entity = value;
					if ((value != null))
					{
						value.EntryCommentDTOs.Add(this);
						this._BlogId = value.BlogId;
					}
					else
					{
						this._BlogId = default(int);
					}
					this.SendPropertyChanged("BlogDTO");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BlogEntryDTO_EntryCommentDTO", Storage="_BlogEntryDTO", ThisKey="EntryId", OtherKey="EntryId", IsForeignKey=true)]
		public BlogEntryDTO BlogEntryDTO
		{
			get
			{
				return this._BlogEntryDTO.Entity;
			}
			set
			{
				BlogEntryDTO previousValue = this._BlogEntryDTO.Entity;
				if (((previousValue != value) 
							|| (this._BlogEntryDTO.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BlogEntryDTO.Entity = null;
						previousValue.EntryCommentDTOs.Remove(this);
					}
					this._BlogEntryDTO.Entity = value;
					if ((value != null))
					{
						value.EntryCommentDTOs.Add(this);
						this._EntryId = value.EntryId;
					}
					else
					{
						this._EntryId = default(int);
					}
					this.SendPropertyChanged("BlogEntryDTO");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ExtensionConfiguration")]
	public partial class ExtensionConfigurationDTO : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ExtensionId;
		
		private int _ConfigurationId;
		
		private string _ExtensionSettings;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnExtensionIdChanging(int value);
    partial void OnExtensionIdChanged();
    partial void OnConfigurationIdChanging(int value);
    partial void OnConfigurationIdChanged();
    partial void OnExtensionSettingsChanging(string value);
    partial void OnExtensionSettingsChanged();
    #endregion
		
		public ExtensionConfigurationDTO()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExtensionId", DbType="Int NOT NULL")]
		public int ExtensionId
		{
			get
			{
				return this._ExtensionId;
			}
			set
			{
				if ((this._ExtensionId != value))
				{
					this.OnExtensionIdChanging(value);
					this.SendPropertyChanging();
					this._ExtensionId = value;
					this.SendPropertyChanged("ExtensionId");
					this.OnExtensionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConfigurationId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ConfigurationId
		{
			get
			{
				return this._ConfigurationId;
			}
			set
			{
				if ((this._ConfigurationId != value))
				{
					this.OnConfigurationIdChanging(value);
					this.SendPropertyChanging();
					this._ConfigurationId = value;
					this.SendPropertyChanged("ConfigurationId");
					this.OnConfigurationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExtensionSettings", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string ExtensionSettings
		{
			get
			{
				return this._ExtensionSettings;
			}
			set
			{
				if ((this._ExtensionSettings != value))
				{
					this.OnExtensionSettingsChanging(value);
					this.SendPropertyChanging();
					this._ExtensionSettings = value;
					this.SendPropertyChanged("ExtensionSettings");
					this.OnExtensionSettingsChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Roles")]
	public partial class RoleDTO : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoleId;
		
		private string _Name;
		
		private EntitySet<BlogUserDTO> _BlogUserDTOs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIdChanging(int value);
    partial void OnRoleIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public RoleDTO()
		{
			this._BlogUserDTOs = new EntitySet<BlogUserDTO>(new Action<BlogUserDTO>(this.attach_BlogUserDTOs), new Action<BlogUserDTO>(this.detach_BlogUserDTOs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoleDTO_BlogUserDTO", Storage="_BlogUserDTOs", ThisKey="RoleId", OtherKey="RoleId")]
		public EntitySet<BlogUserDTO> BlogUserDTOs
		{
			get
			{
				return this._BlogUserDTOs;
			}
			set
			{
				this._BlogUserDTOs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BlogUserDTOs(BlogUserDTO entity)
		{
			this.SendPropertyChanging();
			entity.RoleDTO = this;
		}
		
		private void detach_BlogUserDTOs(BlogUserDTO entity)
		{
			this.SendPropertyChanging();
			entity.RoleDTO = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tags")]
	public partial class TagDTO : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _name;
		
		private int _id;
		
		private int _BlogId;
		
		private EntitySet<BlogEntryTagDTO> _BlogEntryTagDTOs;
		
		private EntityRef<BlogDTO> _BlogDTO;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnBlogIdChanging(int value);
    partial void OnBlogIdChanged();
    #endregion
		
		public TagDTO()
		{
			this._BlogEntryTagDTOs = new EntitySet<BlogEntryTagDTO>(new Action<BlogEntryTagDTO>(this.attach_BlogEntryTagDTOs), new Action<BlogEntryTagDTO>(this.detach_BlogEntryTagDTOs));
			this._BlogDTO = default(EntityRef<BlogDTO>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="name", Storage="_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="id", Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BlogId", DbType="Int NOT NULL")]
		public int BlogId
		{
			get
			{
				return this._BlogId;
			}
			set
			{
				if ((this._BlogId != value))
				{
					if (this._BlogDTO.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBlogIdChanging(value);
					this.SendPropertyChanging();
					this._BlogId = value;
					this.SendPropertyChanged("BlogId");
					this.OnBlogIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TagDTO_BlogEntryTagDTO", Storage="_BlogEntryTagDTOs", ThisKey="Id", OtherKey="TagId")]
		public EntitySet<BlogEntryTagDTO> BlogEntryTagDTOs
		{
			get
			{
				return this._BlogEntryTagDTOs;
			}
			set
			{
				this._BlogEntryTagDTOs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BlogDTO_TagDTO", Storage="_BlogDTO", ThisKey="BlogId", OtherKey="BlogId", IsForeignKey=true)]
		public BlogDTO BlogDTO
		{
			get
			{
				return this._BlogDTO.Entity;
			}
			set
			{
				BlogDTO previousValue = this._BlogDTO.Entity;
				if (((previousValue != value) 
							|| (this._BlogDTO.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BlogDTO.Entity = null;
						previousValue.TagDTOs.Remove(this);
					}
					this._BlogDTO.Entity = value;
					if ((value != null))
					{
						value.TagDTOs.Add(this);
						this._BlogId = value.BlogId;
					}
					else
					{
						this._BlogId = default(int);
					}
					this.SendPropertyChanged("BlogDTO");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BlogEntryTagDTOs(BlogEntryTagDTO entity)
		{
			this.SendPropertyChanging();
			entity.TagDTO = this;
		}
		
		private void detach_BlogEntryTagDTOs(BlogEntryTagDTO entity)
		{
			this.SendPropertyChanging();
			entity.TagDTO = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SiteInfo")]
	public partial class SiteInfoDTO : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _About;
		
		private string _Name;
		
		private string _Url;
		
		private string _ContactEmail;
		
		private int _SiteId;
		
		private string _DefaultTheme;
		
		private string _SiteAnalyticsId;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAboutChanging(string value);
    partial void OnAboutChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnContactEmailChanging(string value);
    partial void OnContactEmailChanged();
    partial void OnSiteIdChanging(int value);
    partial void OnSiteIdChanged();
    partial void OnDefaultThemeChanging(string value);
    partial void OnDefaultThemeChanged();
    partial void OnSiteAnalyticsIdChanging(string value);
    partial void OnSiteAnalyticsIdChanged();
    #endregion
		
		public SiteInfoDTO()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_About", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string About
		{
			get
			{
				return this._About;
			}
			set
			{
				if ((this._About != value))
				{
					this.OnAboutChanging(value);
					this.SendPropertyChanging();
					this._About = value;
					this.SendPropertyChanged("About");
					this.OnAboutChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Url", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactEmail", DbType="NVarChar(50)")]
		public string ContactEmail
		{
			get
			{
				return this._ContactEmail;
			}
			set
			{
				if ((this._ContactEmail != value))
				{
					this.OnContactEmailChanging(value);
					this.SendPropertyChanging();
					this._ContactEmail = value;
					this.SendPropertyChanged("ContactEmail");
					this.OnContactEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SiteId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SiteId
		{
			get
			{
				return this._SiteId;
			}
			set
			{
				if ((this._SiteId != value))
				{
					this.OnSiteIdChanging(value);
					this.SendPropertyChanging();
					this._SiteId = value;
					this.SendPropertyChanged("SiteId");
					this.OnSiteIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefaultTheme", DbType="NVarChar(50)")]
		public string DefaultTheme
		{
			get
			{
				return this._DefaultTheme;
			}
			set
			{
				if ((this._DefaultTheme != value))
				{
					this.OnDefaultThemeChanging(value);
					this.SendPropertyChanging();
					this._DefaultTheme = value;
					this.SendPropertyChanged("DefaultTheme");
					this.OnDefaultThemeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SiteAnalyticsId", DbType="NVarChar(12)")]
		public string SiteAnalyticsId
		{
			get
			{
				return this._SiteAnalyticsId;
			}
			set
			{
				if ((this._SiteAnalyticsId != value))
				{
					this.OnSiteAnalyticsIdChanging(value);
					this.SendPropertyChanging();
					this._SiteAnalyticsId = value;
					this.SendPropertyChanged("SiteAnalyticsId");
					this.OnSiteAnalyticsIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class UserDTO : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _UserName;
		
		private string _Password;
		
		private int _UserId;
		
		private string _Email;
		
		private bool _ApprovedCommenter;
		
		private bool _IsActive;
		
		private bool _IsSiteAdministrator;
		
		private string _About;
		
		private string _DisplayName;
		
		private EntitySet<BlogUserDTO> _BlogUserDTOs;
		
		private EntitySet<BlogEntryDTO> _BlogEntryDTOs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnApprovedCommenterChanging(bool value);
    partial void OnApprovedCommenterChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsSiteAdministratorChanging(bool value);
    partial void OnIsSiteAdministratorChanged();
    partial void OnAboutChanging(string value);
    partial void OnAboutChanged();
    partial void OnDisplayNameChanging(string value);
    partial void OnDisplayNameChanged();
    #endregion
		
		public UserDTO()
		{
			this._BlogUserDTOs = new EntitySet<BlogUserDTO>(new Action<BlogUserDTO>(this.attach_BlogUserDTOs), new Action<BlogUserDTO>(this.detach_BlogUserDTOs));
			this._BlogEntryDTOs = new EntitySet<BlogEntryDTO>(new Action<BlogEntryDTO>(this.attach_BlogEntryDTOs), new Action<BlogEntryDTO>(this.detach_BlogEntryDTOs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApprovedCommenter", DbType="Bit NOT NULL")]
		public bool ApprovedCommenter
		{
			get
			{
				return this._ApprovedCommenter;
			}
			set
			{
				if ((this._ApprovedCommenter != value))
				{
					this.OnApprovedCommenterChanging(value);
					this.SendPropertyChanging();
					this._ApprovedCommenter = value;
					this.SendPropertyChanged("ApprovedCommenter");
					this.OnApprovedCommenterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSiteAdministrator", DbType="Bit NOT NULL")]
		public bool IsSiteAdministrator
		{
			get
			{
				return this._IsSiteAdministrator;
			}
			set
			{
				if ((this._IsSiteAdministrator != value))
				{
					this.OnIsSiteAdministratorChanging(value);
					this.SendPropertyChanging();
					this._IsSiteAdministrator = value;
					this.SendPropertyChanged("IsSiteAdministrator");
					this.OnIsSiteAdministratorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_About", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string About
		{
			get
			{
				return this._About;
			}
			set
			{
				if ((this._About != value))
				{
					this.OnAboutChanging(value);
					this.SendPropertyChanging();
					this._About = value;
					this.SendPropertyChanged("About");
					this.OnAboutChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayName", DbType="NVarChar(100)")]
		public string DisplayName
		{
			get
			{
				return this._DisplayName;
			}
			set
			{
				if ((this._DisplayName != value))
				{
					this.OnDisplayNameChanging(value);
					this.SendPropertyChanging();
					this._DisplayName = value;
					this.SendPropertyChanged("DisplayName");
					this.OnDisplayNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserDTO_BlogUserDTO", Storage="_BlogUserDTOs", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<BlogUserDTO> BlogUserDTOs
		{
			get
			{
				return this._BlogUserDTOs;
			}
			set
			{
				this._BlogUserDTOs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserDTO_BlogEntryDTO", Storage="_BlogEntryDTOs", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<BlogEntryDTO> BlogEntryDTOs
		{
			get
			{
				return this._BlogEntryDTOs;
			}
			set
			{
				this._BlogEntryDTOs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BlogUserDTOs(BlogUserDTO entity)
		{
			this.SendPropertyChanging();
			entity.UserDTO = this;
		}
		
		private void detach_BlogUserDTOs(BlogUserDTO entity)
		{
			this.SendPropertyChanging();
			entity.UserDTO = null;
		}
		
		private void attach_BlogEntryDTOs(BlogEntryDTO entity)
		{
			this.SendPropertyChanging();
			entity.UserDTO = this;
		}
		
		private void detach_BlogEntryDTOs(BlogEntryDTO entity)
		{
			this.SendPropertyChanging();
			entity.UserDTO = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BlogListItems")]
	public partial class BlogListItemDTO : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _RelatedLink;
		
		private int _DisplayOrder;
		
		private System.Nullable<int> _BlogListId;
		
		private EntityRef<BlogListDTO> _BlogListDTO;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnRelatedLinkChanging(string value);
    partial void OnRelatedLinkChanged();
    partial void OnDisplayOrderChanging(int value);
    partial void OnDisplayOrderChanged();
    partial void OnBlogListIdChanging(System.Nullable<int> value);
    partial void OnBlogListIdChanged();
    #endregion
		
		public BlogListItemDTO()
		{
			this._BlogListDTO = default(EntityRef<BlogListDTO>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelatedLink", DbType="NVarChar(255)")]
		public string RelatedLink
		{
			get
			{
				return this._RelatedLink;
			}
			set
			{
				if ((this._RelatedLink != value))
				{
					this.OnRelatedLinkChanging(value);
					this.SendPropertyChanging();
					this._RelatedLink = value;
					this.SendPropertyChanged("RelatedLink");
					this.OnRelatedLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayOrder", DbType="Int NOT NULL")]
		public int DisplayOrder
		{
			get
			{
				return this._DisplayOrder;
			}
			set
			{
				if ((this._DisplayOrder != value))
				{
					this.OnDisplayOrderChanging(value);
					this.SendPropertyChanging();
					this._DisplayOrder = value;
					this.SendPropertyChanged("DisplayOrder");
					this.OnDisplayOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BlogListId", DbType="Int")]
		public System.Nullable<int> BlogListId
		{
			get
			{
				return this._BlogListId;
			}
			set
			{
				if ((this._BlogListId != value))
				{
					if (this._BlogListDTO.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBlogListIdChanging(value);
					this.SendPropertyChanging();
					this._BlogListId = value;
					this.SendPropertyChanged("BlogListId");
					this.OnBlogListIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BlogListDTO_BlogListItemDTO", Storage="_BlogListDTO", ThisKey="BlogListId", OtherKey="Id", IsForeignKey=true)]
		public BlogListDTO BlogListDTO
		{
			get
			{
				return this._BlogListDTO.Entity;
			}
			set
			{
				BlogListDTO previousValue = this._BlogListDTO.Entity;
				if (((previousValue != value) 
							|| (this._BlogListDTO.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BlogListDTO.Entity = null;
						previousValue.BlogListItemDTOs.Remove(this);
					}
					this._BlogListDTO.Entity = value;
					if ((value != null))
					{
						value.BlogListItemDTOs.Add(this);
						this._BlogListId = value.Id;
					}
					else
					{
						this._BlogListId = default(Nullable<int>);
					}
					this.SendPropertyChanged("BlogListDTO");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BlogLists")]
	public partial class BlogListDTO : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _BlogId;
		
		private string _Name;
		
		private bool _ShowOrdered;
		
		private EntitySet<BlogListItemDTO> _BlogListItemDTOs;
		
		private EntityRef<BlogDTO> _BlogDTO;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnBlogIdChanging(int value);
    partial void OnBlogIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnShowOrderedChanging(bool value);
    partial void OnShowOrderedChanged();
    #endregion
		
		public BlogListDTO()
		{
			this._BlogListItemDTOs = new EntitySet<BlogListItemDTO>(new Action<BlogListItemDTO>(this.attach_BlogListItemDTOs), new Action<BlogListItemDTO>(this.detach_BlogListItemDTOs));
			this._BlogDTO = default(EntityRef<BlogDTO>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BlogId", DbType="Int")]
		public int BlogId
		{
			get
			{
				return this._BlogId;
			}
			set
			{
				if ((this._BlogId != value))
				{
					if (this._BlogDTO.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBlogIdChanging(value);
					this.SendPropertyChanging();
					this._BlogId = value;
					this.SendPropertyChanged("BlogId");
					this.OnBlogIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShowOrdered", DbType="Bit NOT NULL")]
		public bool ShowOrdered
		{
			get
			{
				return this._ShowOrdered;
			}
			set
			{
				if ((this._ShowOrdered != value))
				{
					this.OnShowOrderedChanging(value);
					this.SendPropertyChanging();
					this._ShowOrdered = value;
					this.SendPropertyChanged("ShowOrdered");
					this.OnShowOrderedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BlogListDTO_BlogListItemDTO", Storage="_BlogListItemDTOs", ThisKey="Id", OtherKey="BlogListId")]
		public EntitySet<BlogListItemDTO> BlogListItemDTOs
		{
			get
			{
				return this._BlogListItemDTOs;
			}
			set
			{
				this._BlogListItemDTOs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BlogDTO_BlogListDTO", Storage="_BlogDTO", ThisKey="BlogId", OtherKey="BlogId", IsForeignKey=true)]
		public BlogDTO BlogDTO
		{
			get
			{
				return this._BlogDTO.Entity;
			}
			set
			{
				BlogDTO previousValue = this._BlogDTO.Entity;
				if (((previousValue != value) 
							|| (this._BlogDTO.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BlogDTO.Entity = null;
						previousValue.BlogListDTOs.Remove(this);
					}
					this._BlogDTO.Entity = value;
					if ((value != null))
					{
						value.BlogListDTOs.Add(this);
						this._BlogId = value.BlogId;
					}
					else
					{
						this._BlogId = default(int);
					}
					this.SendPropertyChanged("BlogDTO");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BlogListItemDTOs(BlogListItemDTO entity)
		{
			this.SendPropertyChanging();
			entity.BlogListDTO = this;
		}
		
		private void detach_BlogListItemDTOs(BlogListItemDTO entity)
		{
			this.SendPropertyChanging();
			entity.BlogListDTO = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BlogEntries")]
	public partial class BlogEntryDTO : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EntryId;
		
		private string _EntryText;
		
		private int _BlogId;
		
		private int _UserId;
		
		private string _Title;
		
		private bool _IsPublished;
		
		private System.DateTime _DatePosted;
		
		private System.DateTime _DateCreated;
		
		private int _TimesViewed;
		
		private EntitySet<BlogEntryTagDTO> _BlogEntryTagDTOs;
		
		private EntitySet<EntryCommentDTO> _EntryCommentDTOs;
		
		private EntityRef<BlogDTO> _BlogDTO;
		
		private EntityRef<UserDTO> _UserDTO;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEntryIdChanging(int value);
    partial void OnEntryIdChanged();
    partial void OnEntryTextChanging(string value);
    partial void OnEntryTextChanged();
    partial void OnBlogIdChanging(int value);
    partial void OnBlogIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnIsPublishedChanging(bool value);
    partial void OnIsPublishedChanged();
    partial void OnDatePostedChanging(System.DateTime value);
    partial void OnDatePostedChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnTimesViewedChanging(int value);
    partial void OnTimesViewedChanged();
    #endregion
		
		public BlogEntryDTO()
		{
			this._BlogEntryTagDTOs = new EntitySet<BlogEntryTagDTO>(new Action<BlogEntryTagDTO>(this.attach_BlogEntryTagDTOs), new Action<BlogEntryTagDTO>(this.detach_BlogEntryTagDTOs));
			this._EntryCommentDTOs = new EntitySet<EntryCommentDTO>(new Action<EntryCommentDTO>(this.attach_EntryCommentDTOs), new Action<EntryCommentDTO>(this.detach_EntryCommentDTOs));
			this._BlogDTO = default(EntityRef<BlogDTO>);
			this._UserDTO = default(EntityRef<UserDTO>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntryId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EntryId
		{
			get
			{
				return this._EntryId;
			}
			set
			{
				if ((this._EntryId != value))
				{
					this.OnEntryIdChanging(value);
					this.SendPropertyChanging();
					this._EntryId = value;
					this.SendPropertyChanged("EntryId");
					this.OnEntryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntryText", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string EntryText
		{
			get
			{
				return this._EntryText;
			}
			set
			{
				if ((this._EntryText != value))
				{
					this.OnEntryTextChanging(value);
					this.SendPropertyChanging();
					this._EntryText = value;
					this.SendPropertyChanged("EntryText");
					this.OnEntryTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BlogId", DbType="Int NOT NULL")]
		public int BlogId
		{
			get
			{
				return this._BlogId;
			}
			set
			{
				if ((this._BlogId != value))
				{
					if (this._BlogDTO.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBlogIdChanging(value);
					this.SendPropertyChanging();
					this._BlogId = value;
					this.SendPropertyChanged("BlogId");
					this.OnBlogIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._UserDTO.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsPublished", DbType="Bit NOT NULL")]
		public bool IsPublished
		{
			get
			{
				return this._IsPublished;
			}
			set
			{
				if ((this._IsPublished != value))
				{
					this.OnIsPublishedChanging(value);
					this.SendPropertyChanging();
					this._IsPublished = value;
					this.SendPropertyChanged("IsPublished");
					this.OnIsPublishedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DatePosted", DbType="DateTime NOT NULL")]
		public System.DateTime DatePosted
		{
			get
			{
				return this._DatePosted;
			}
			set
			{
				if ((this._DatePosted != value))
				{
					this.OnDatePostedChanging(value);
					this.SendPropertyChanging();
					this._DatePosted = value;
					this.SendPropertyChanged("DatePosted");
					this.OnDatePostedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimesViewed", DbType="Int NOT NULL")]
		public int TimesViewed
		{
			get
			{
				return this._TimesViewed;
			}
			set
			{
				if ((this._TimesViewed != value))
				{
					this.OnTimesViewedChanging(value);
					this.SendPropertyChanging();
					this._TimesViewed = value;
					this.SendPropertyChanged("TimesViewed");
					this.OnTimesViewedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BlogEntryDTO_BlogEntryTagDTO", Storage="_BlogEntryTagDTOs", ThisKey="EntryId", OtherKey="PostId")]
		public EntitySet<BlogEntryTagDTO> BlogEntryTagDTOs
		{
			get
			{
				return this._BlogEntryTagDTOs;
			}
			set
			{
				this._BlogEntryTagDTOs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BlogEntryDTO_EntryCommentDTO", Storage="_EntryCommentDTOs", ThisKey="EntryId", OtherKey="EntryId")]
		public EntitySet<EntryCommentDTO> EntryCommentDTOs
		{
			get
			{
				return this._EntryCommentDTOs;
			}
			set
			{
				this._EntryCommentDTOs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BlogDTO_BlogEntryDTO", Storage="_BlogDTO", ThisKey="BlogId", OtherKey="BlogId", IsForeignKey=true)]
		public BlogDTO BlogDTO
		{
			get
			{
				return this._BlogDTO.Entity;
			}
			set
			{
				BlogDTO previousValue = this._BlogDTO.Entity;
				if (((previousValue != value) 
							|| (this._BlogDTO.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BlogDTO.Entity = null;
						previousValue.BlogEntryDTOs.Remove(this);
					}
					this._BlogDTO.Entity = value;
					if ((value != null))
					{
						value.BlogEntryDTOs.Add(this);
						this._BlogId = value.BlogId;
					}
					else
					{
						this._BlogId = default(int);
					}
					this.SendPropertyChanged("BlogDTO");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserDTO_BlogEntryDTO", Storage="_UserDTO", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public UserDTO UserDTO
		{
			get
			{
				return this._UserDTO.Entity;
			}
			set
			{
				UserDTO previousValue = this._UserDTO.Entity;
				if (((previousValue != value) 
							|| (this._UserDTO.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserDTO.Entity = null;
						previousValue.BlogEntryDTOs.Remove(this);
					}
					this._UserDTO.Entity = value;
					if ((value != null))
					{
						value.BlogEntryDTOs.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("UserDTO");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BlogEntryTagDTOs(BlogEntryTagDTO entity)
		{
			this.SendPropertyChanging();
			entity.BlogEntryDTO = this;
		}
		
		private void detach_BlogEntryTagDTOs(BlogEntryTagDTO entity)
		{
			this.SendPropertyChanging();
			entity.BlogEntryDTO = null;
		}
		
		private void attach_EntryCommentDTOs(EntryCommentDTO entity)
		{
			this.SendPropertyChanging();
			entity.BlogEntryDTO = this;
		}
		
		private void detach_EntryCommentDTOs(EntryCommentDTO entity)
		{
			this.SendPropertyChanging();
			entity.BlogEntryDTO = null;
		}
	}
}
#pragma warning restore 1591
